
services:
  app1:
    build:
      context: .
      dockerfile: ./Dockerfile
    volumes:
      - .:/django
    ports:
      - "8002:8000"
    image: app:mult_tenant_pharmacy1
    container_name: mult_tenant_pharmacy1
    command: python manage.py runserver 0.0.0.0:8000  
    depends_on:
      - db
      - redis
    environment:
     DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-django-secret-key-change-in-production}
     DEBUG: ${DEBUG:-True}  # Default value is "True" if not provided
     DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL:-info}  # Default value is "info" if not provided
     DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}  # Default value
     DATABASE_ENGINE: ${DATABASE_ENGINE:-django_tenants.postgresql_backend}  # Default value
     DATABASE_NAME: ${DATABASE_NAME:-mult_tenant}  # Default value
     DATABASE_USERNAME: ${DATABASE_USERNAME:-postgres}  # Default value
     DATABASE_PASSWORD: ${DATABASE_PASSWORD:-postgres}  # Default value
     DATABASE_HOST: ${DATABASE_HOST:-db}  # Default value
     DATABASE_PORT: ${DATABASE_PORT:-5432}
     REDIS_HOST: ${REDIS_HOST:-redis}
     REDIS_PORT: ${REDIS_PORT:-6380}
     REDIS_DB: ${REDIS_DB:-0}
    env_file:
     - .env  
    networks:
      - monitoring

  app2:
    build:
      context: .
      dockerfile: ./Dockerfile
    volumes:
      - .:/django
    ports:
      - "8004:8000"
    image: app:mult_tenant_pharmacy2
    container_name: mult_tenant_pharmacy2
    command: python manage.py runserver 0.0.0.0:8000  
    depends_on:
      - db
      - redis
    environment:
     DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-django-secret-key-change-in-production}
     DEBUG: ${DEBUG:-True}  # Default value is "True" if not provided
     DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL:-info}  # Default value is "info" if not provided
     DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}  # Default value
     DATABASE_ENGINE: ${DATABASE_ENGINE:-django_tenants.postgresql_backend}  # Default value
     DATABASE_NAME: ${DATABASE_NAME:-mult_tenant}  # Default value
     DATABASE_USERNAME: ${DATABASE_USERNAME:-postgres}  # Default value
     DATABASE_PASSWORD: ${DATABASE_PASSWORD:-postgres}  # Default value
     DATABASE_HOST: ${DATABASE_HOST:-db}  # Default value
     DATABASE_PORT: ${DATABASE_PORT:-5432}
     REDIS_HOST: ${REDIS_HOST:-redis}
     REDIS_PORT: ${REDIS_PORT:-6380}
     REDIS_DB: ${REDIS_DB:-0}
    env_file:
     - .env  
    networks:
      - monitoring      

    

  db:  
    image: postgres
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: mult_tenant
    container_name:  postgres_db_mult_pharmacy
    networks:
      - monitoring

  redis:
    image: redis:7-alpine
    container_name: redis_pharmacy
    ports:
      - "6380:6379"
    volumes:
      - redis_pharmacy_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - monitoring
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_pharmacy
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2183:2181"
      - "2890:2888"
      - "3890:3888"
    networks:
      - monitoring

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_pharmacy
    restart: "no"
    depends_on:
      - zookeeper
    ports:
      - "9094:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus1
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus1.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana1
    ports:
      - "3002:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - monitoring
    
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
    ports:
      - "80:80"
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  grafana-storage:
  redis_pharmacy_data:
